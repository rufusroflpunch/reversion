#!/usr/bin/env ruby

$VERSION = '0.1.1'

require_relative 'lib/reversion'

@usage =
  "Reversion #{$VERSION}
Usage: rvn <command> [args]
  
  Commands:
    init:       Create a new repository.
    add:        Adds a file to the repo.
    checkout:   Switch to a previous commit.
    all:        List all currently tracked files.
    modified:   List tracked files that have been modified
                since their last commit.
    rm:         Remove files from being tracked.
    log:        Display the commit log for this repo.
    commit:     Commit the current changes to the repo.
                [args] is the commit message (in quotes).
    help:       Display this message.\n"

@command = ARGV.shift
@repo = Reversion.new('.rev/')

case @command
when "init"
  # Create new repo
  if File.directory? '.rev/'
    puts 'Repo or directory .rev already exists.'
    exit
  else
    puts 'Initalizing repo in .rev/'
    @repo.init_repo
  end
when "add"
  # Track new file(s)
  ARGV.each do |f|
    if File.exists? f
      puts "Adding #{ f }."
      @repo.add_file f
    else
      puts "Unable to add #{ f }."
    end
  end
when "checkout"
  # Move to a previous commit
  commit_id = ARGV[0]
  if @repo.commit? commit_id
    puts "Checking out commit #{ commit_id }."
    @error = @repo.checkout commit_id
  else
    puts "Can't checkout invalid commit."
  end
when "commit"
  # Commit the currently tracked changes
  puts "Commiting changes to reposository. Commit ID #{ @repo.commit ARGV[0] }"
when "all"
  # List the currently tracked files
  if @repo.tracked_files.empty?
    puts "No files tracked."
  else
    puts "Currently tracking:"
  end
  @repo.tracked_files.each { |f| puts " #{ f }"}
when "modified"
  # List all files modified since last commit
  mod_files = @repo.modified_files
  if mod_files.empty?
    puts "No modified files."
  else
    puts 'Tracked files that have been modified:'
  end
  @repo.modified_files.each { |f| puts "  #{ f }"}
when "rm"
  # Remove files from being tracked
  ARGV.each do |f|
    puts "No longer tracking #{ f }"
    @repo.rm_file f
  end
when "log"
  # Diplay the commit log for this repo.
  commit_list = @repo.commit_list
  commit_list.each do |k,v|
    puts "--- Commit ID: #{ File.basename(k) } ---"
    puts "Time: #{ File.mtime k }"
    puts "Message: #{ v.shift }"
    puts "Affected files: #{ v.join ', ' }"
    puts "\n"
  end
when "help"
  puts @usage
  exit
else
  puts @usage
  exit
end

# Output any error messages.
puts "ERROR: #{ @error }" if @error
